# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].sections['StiffShell'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Titanium Alpha-Beta', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=1.0, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Cross'].features['Shell planar-1'].sketch)
mdb.models['Model-1'].parts['Cross'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Cross'].features['Shell planar-1'])
mdb.models['Model-1'].sketches['__edit__'].parameters['SubWidth'].setValues(
    expression='0.01')
mdb.models['Model-1'].sketches['__edit__'].parameters['SubHeight'].setValues(
    expression='0.01')
mdb.models['Model-1'].parts['Cross'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
mdb.models['Model-1'].parts['Cross'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['Cross'].features['Partition face-1'].sketch)
mdb.models['Model-1'].parts['Cross'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['Cross'].features['Partition face-1'])
mdb.models['Model-1'].sketches['__edit__'].parameters['CornerEdge'].setValues(
    expression='0.18*SubWidth')
mdb.models['Model-1'].sketches['__edit__'].parameters['fillet'].setValues(
    expression='0.04*SubWidth')
mdb.models['Model-1'].sketches['__edit__'].parameters['Thick13'].setValues(
    expression='0.05*SubWidth')
mdb.models['Model-1'].sketches['__edit__'].parameters['Thick24'].setValues(
    expression='0.05*SubWidth')
mdb.models['Model-1'].parts['Cross'].features['Partition face-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
mdb.models['Model-1'].parts['Cross'].regenerate()
mdb.models['Model-1'].parts['Cross'].deleteMesh()
mdb.models['Model-1'].parts['Cross'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.00021)
mdb.models['Model-1'].parts['Cross'].generateMesh()
mdb.Model(name='Substructure_Model', objectToCopy=mdb.models['Model-1'])
del mdb.models['Substructure_Model'].steps['Step-1']
mdb.models['Substructure_Model'].SubstructureGenerateStep(name='subGenerate', 
    previous='Initial', substructureIdentifier=1)
mdb.models['Substructure_Model'].steps['subGenerate'].setValues(
    substructureIdentifier=1)
mdb.models['Substructure_Model'].rootAssembly.Instance(dependent=ON, name=
    'Cross-1', part=mdb.models['Substructure_Model'].parts['Cross'])
mdb.models['Substructure_Model'].rootAssembly.Set(edges=
    mdb.models['Substructure_Model'].rootAssembly.instances['Cross-1'].edges.findAt(
    ((-0.00455, 0.005, 0.0), ), ((0.00365, 0.005, 0.0), ), ((-0.0024, 0.005, 
    0.0), ), ((0.0008, 0.005, 0.0), ), ), name='Top')
mdb.models['Substructure_Model'].rootAssembly.Set(edges=
    mdb.models['Substructure_Model'].rootAssembly.instances['Cross-1'].edges.findAt(
    ((0.00455, -0.005, 0.0), ), ((0.0024, -0.005, 0.0), ), ((-0.0008, -0.005, 
    0.0), ), ((-0.00365, -0.005, 0.0), ), ), name='Bottom')
mdb.models['Substructure_Model'].rootAssembly.Set(edges=
    mdb.models['Substructure_Model'].rootAssembly.instances['Cross-1'].edges.findAt(
    ((-0.005, 0.00365, 0.0), ), ((-0.005, -0.0024, 0.0), ), ((-0.005, 0.0008, 
    0.0), ), ((-0.005, -0.00455, 0.0), ), ), name='Left')
mdb.models['Substructure_Model'].rootAssembly.Set(edges=
    mdb.models['Substructure_Model'].rootAssembly.instances['Cross-1'].edges.findAt(
    ((0.005, 0.00455, 0.0), ), ((0.005, -0.00365, 0.0), ), ((0.005, 0.0024, 
    0.0), ), ((0.005, -0.0008, 0.0), ), ), name='Right')
mdb.models['Substructure_Model'].RetainedNodalDofsBC(createStepName=
    'subGenerate', name='BottomFix', region=
    mdb.models['Substructure_Model'].rootAssembly.sets['Bottom'], u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Substructure_Model'].RetainedNodalDofsBC(createStepName=
    'subGenerate', name='TopFix', region=
    mdb.models['Substructure_Model'].rootAssembly.sets['Top'], u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Substructure_Model'].RetainedNodalDofsBC(createStepName=
    'subGenerate', name='LeftFix', region=
    mdb.models['Substructure_Model'].rootAssembly.sets['Left'], u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Substructure_Model'].RetainedNodalDofsBC(createStepName=
    'subGenerate', name='RightFix', region=
    mdb.models['Substructure_Model'].rootAssembly.sets['Right'], u1=ON, u2=ON, 
    u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Substructure_Model', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='Cross-1', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-0.0075, 0.0), 
    point2=(0.0075, 0.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='Surface', type=
    ANALYTIC_RIGID_SURFACE)
mdb.models['Model-1'].parts['Surface'].AnalyticRigidSurfExtrude(depth=10.0, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Surface-1', 
    part=mdb.models['Model-1'].parts['Surface'])
mdb.models['Model-1'].rootAssembly.translate(instanceList=('Surface-1', ), 
    vector=(0.0, 0.005, 0.0))
mdb.models['Model-1'].rootAssembly.ReferencePoint(point=(0.0, 0.005, 0.0))
mdb.models['Model-1'].rootAssembly.Surface(name='RigidBody', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['Surface-1'].faces.findAt(((
    0.0, 0.005, -1.0), )))
mdb.models['Model-1'].RigidBody(name='RigidBody', refPointRegion=Region(
    referencePoints=(mdb.models['Model-1'].rootAssembly.referencePoints[23], ))
    , surfaceRegion=mdb.models['Model-1'].rootAssembly.surfaces['RigidBody'])
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cross-1'].edges.findAt(((
    -0.00455, 0.005, 0.0), ), ((0.00365, 0.005, 0.0), ), ((-0.0024, 0.005, 
    0.0), ), ((0.0008, 0.005, 0.0), ), ), name='Top_Edge')
mdb.models['Model-1'].Tie(adjust=ON, master=
    mdb.models['Model-1'].rootAssembly.surfaces['RigidBody'], name='Tie', 
    positionToleranceMethod=COMPUTED, slave=
    mdb.models['Model-1'].rootAssembly.sets['Top_Edge'], thickness=OFF, 
    tieRotations=ON)
del mdb.models['Model-1'].steps['Step-1']
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].rootAssembly.Set(edges=
    mdb.models['Model-1'].rootAssembly.instances['Cross-1'].edges.findAt(((
    0.00455, -0.005, 0.0), ), ((0.0024, -0.005, 0.0), ), ((-0.0008, -0.005, 
    0.0), ), ((-0.00365, -0.005, 0.0), ), ), name='Set-3')
mdb.models['Model-1'].EncastreBC(createStepName='Initial', localCsys=None, 
    name='FIX_BOTTOM', region=mdb.models['Model-1'].rootAssembly.sets['Set-3'])
mdb.models['Model-1'].rootAssembly.Set(name='TOP_MIDDLE', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Cross-1'].vertices.findAt(((
    0.0, 0.005, 0.0), )))
mdb.models['Model-1'].rootAssembly.Set(faces=
    mdb.models['Model-1'].rootAssembly.instances['Cross-1'].faces.findAt(((
    -0.002589, 0.00244, 0.0), (0.0, 0.0, 1.0)), ((-0.001664, 0.001781, 0.0), (
    0.0, 0.0, 1.0)), ((0.002589, 0.00244, 0.0), (0.0, 0.0, 1.0)), ((0.002589, 
    -0.00244, 0.0), (0.0, 0.0, 1.0)), ((0.00353, 0.001596, 0.0), (0.0, 0.0, 
    1.0)), ((0.000129, -0.000563, 0.0), (0.0, 0.0, 1.0)), ((-0.000563, 
    -0.000129, 0.0), (0.0, 0.0, 1.0)), ((-0.001596, 0.00353, 0.0), (0.0, 0.0, 
    1.0)), ((0.000101, 0.000542, 0.0), (0.0, 0.0, 1.0)), ((0.002052, -9.4e-05, 
    0.0), (0.0, 0.0, 1.0)), ((-9.4e-05, -0.002052, 0.0), (0.0, 0.0, 1.0)), ((
    -0.000542, 0.000101, 0.0), (0.0, 0.0, 1.0)), ((-0.002589, -0.00244, 0.0), (
    0.0, 0.0, 1.0)), ), name='ALL_PART')
mdb.models['Model-1'].rootAssembly.Set(name='TOP_RP', referencePoints=(
    mdb.models['Model-1'].rootAssembly.referencePoints[23], ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'MOVE_RP', region=mdb.models['Model-1'].rootAssembly.sets['TOP_RP'], u1=
    5e-06, u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=0.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='X_DISP', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['X_DISP'].submit(consistencyChecking=OFF)
mdb.jobs['X_DISP'].waitForCompletion()
